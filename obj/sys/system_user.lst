ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 .include "sys/system_user.h.s"
                              1 ;;DEPENDENCIAS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                              2 .include "main.h.s"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                              1 .include "data.h.s"
                              1 ;;MAPS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                              2 .include "bins/map_00.h.s"
                              1 ;; File 'src/bins/map_00.h.s' generated using cpct_pack
                              2 ;; Compresor used:   zx7b
                              3 ;; Files compressed: [ 'src/maps/Mapa_00.bin' ]
                              4 ;; Uncompressed:     460 bytes
                              5 ;; Compressed:       120 bytes
                              6 ;; Space saved:      340 bytes
                              7 ;;
                              8 
                              9 ;; Declaration of the compressed array and
                             10 ;; the address of the latest byte of the compressed array (for unpacking purposes)
                             11 .globl _map_00
                             12 .globl _map_00_end
                             13 
                             14 ;; Compressed and uncompressed sizes
                     0078    15 _map_00_size_z == 120
                     01CC    16 _map_00_size   == 460
                             17 
                             18 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



                              3 
                              4 .globl level_index
                              5 
                              6 .globl palette_index
                              7 
                              8 
                              9 ;HUD COSAS
                             10 ;                         ptr
                     A807    11 HUD_P1_DEATHS   = 0xA807
                     A847    12 HUD_P2_DEATHS   = 0xA847
                             13 
                     A80E    14 HUD_P1_SCORE    = 0xA80E
                     A83B    15 HUD_P2_SCORE    = 0xA83B
                             16 
                     A024    17 HUD_SKULL_1     = 0xA024
                     A027    18 HUD_SKULL_2     = 0xA027
                     A02A    19 HUD_SKULL_3     = 0xA02A
                             20 
                             21 
                             22 
                     0002    23 NUM_LEVELS = 2
                             24 
                             25 ;;SPRITES
                             26 .globl _checkpoint_top_spr_0
                             27 .globl _checkpoint_top_spr_1
                             28 
                             29 .globl _player_spr_00
                             30 .globl _player_spr_01
                             31 .globl _player_spr_04
                             32 .globl _player_spr_05
                             33 .globl _player_spr_08
                             34 .globl _player_spr_09
                             35 .globl _player_spr_12
                             36 .globl _player_spr_13
                             37 .globl _player_spr_14
                             38 .globl _player_spr_15
                             39 .globl _player_spr_16
                             40 .globl _player_spr_17
                             41 
                             42 .globl _player_2_spr_00
                             43 .globl _player_2_spr_13
                             44 .globl _player_2_spr_14
                             45 .globl _player_2_spr_15
                             46 .globl _player_2_spr_16
                             47 .globl _player_2_spr_17 
                             48 
                             49 .globl _enemy_spr_00
                             50 .globl _enemy_spr_04
                             51 .globl _enemy_spr_08
                             52 .globl _enemy_spr_12
                             53 .globl _enemy_spr_16
                             54 .globl _enemy_spr_20
                             55 
                             56 .globl _door_spr_0
                             57 .globl _door_spr_1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



                             58 .globl _door_spr_2
                             59 .globl _door_spr_3
                             60 .globl _door_spr_4
                             61 
                             62 .globl _hud_spr_15
                             63 .globl _hud_spr_14
                             64 .globl _hud_spr_13
                             65 .globl _hud_spr_12
                             66 .globl _hud_spr_11
                             67 .globl _hud_spr_10
                             68 .globl _hud_spr_09
                             69 .globl _hud_spr_08
                             70 .globl _hud_spr_07
                             71 .globl _hud_spr_06
                             72 .globl _hud_spr_05
                             73 .globl _hud_spr_04
                             74 .globl _hud_spr_03
                             75 .globl _hud_spr_02
                             76 .globl _hud_spr_01
                             77 .globl _hud_spr_00
                             78 
                             79 .globl _hud_skull_spr_2
                             80 .globl _hud_skull_spr_1
                             81 .globl _hud_skull_spr_0
                             82 
                             83 .globl _letter_spr_27
                             84 .globl _letter_spr_26
                             85 .globl _letter_spr_25
                             86 .globl _letter_spr_24
                             87 .globl _letter_spr_23
                             88 .globl _letter_spr_22
                             89 .globl _letter_spr_21
                             90 .globl _letter_spr_20
                             91 .globl _letter_spr_19
                             92 .globl _letter_spr_18
                             93 .globl _letter_spr_17
                             94 .globl _letter_spr_16
                             95 .globl _letter_spr_15
                             96 .globl _letter_spr_14
                             97 .globl _letter_spr_13
                             98 .globl _letter_spr_12
                             99 .globl _letter_spr_11
                            100 .globl _letter_spr_10
                            101 .globl _letter_spr_09
                            102 .globl _letter_spr_08
                            103 .globl _letter_spr_07
                            104 .globl _letter_spr_06
                            105 .globl _letter_spr_05
                            106 .globl _letter_spr_04
                            107 .globl _letter_spr_03
                            108 .globl _letter_spr_02
                            109 .globl _letter_spr_01
                            110 .globl _letter_spr_00
                            111 
                            112 .globl _offon_spr_2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



                            113 .globl _offon_spr_1
                            114 .globl _offon_spr_0
                            115 
                            116 .globl _dospuntos_spr
                            117 
                            118 .globl _double_jump_spr_0
                            119 .globl _double_jump_spr_1
                            120 .globl _double_jump_spr_2
                            121 .globl _double_jump_spr_3
                            122 .globl _double_jump_spr_4
                            123 
                            124 .globl _gravity_spr_13
                            125 .globl _gravity_spr_12
                            126 .globl _gravity_spr_11
                            127 .globl _gravity_spr_10
                            128 .globl _gravity_spr_09
                            129 .globl _gravity_spr_08
                            130 .globl _gravity_spr_07
                            131 .globl _gravity_spr_06
                            132 .globl _gravity_spr_05
                            133 .globl _gravity_spr_04
                            134 .globl _gravity_spr_03
                            135 .globl _gravity_spr_02
                            136 .globl _gravity_spr_01
                            137 .globl _gravity_spr_00
                            138 
                            139 .globl _colectable_spr_3
                            140 .globl _colectable_spr_2
                            141 .globl _colectable_spr_1
                            142 .globl _colectable_spr_0
                            143 .globl _colectable_void_spr
                            144 
                            145 .globl _hud_number_index
                            146 .globl _hud_letter_index
                            147 
                            148 ;;TEXTOS
                            149 .globl mm_singleplayer
                            150 .globl mm_multiplayer
                            151 .globl mm_options
                            152 
                            153 .globl om_controls
                            154 .globl om_p1controls
                            155 .globl om_p2controls
                            156 .globl om_accessibility
                            157 .globl om_godmode
                            158 .globl om_palette
                            159 .globl om_restore
                            160 .globl om_back
                            161 .globl om_changecontrols
                            162 .globl om_rightkey
                            163 .globl om_leftkey
                            164 .globl om_jumpkey
                            165 .globl om_off
                            166 .globl om_on
                            167 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



                            168 .globl pm_pause
                            169 .globl pm_return
                            170 .globl pm_mainmenu
                            171 
                            172 .globl em_completed
                            173 .globl em_score
                            174 .globl em_deaths
                            175 .globl em_p1
                            176 .globl em_p2
                            177 .globl em_time
                            178 .globl em_key
                            179 .globl em_no_p2_score
                            180 .globl em_no_p2_deaths
                            181 
                            182 
                            183 ;;                       Y        X
                     0C30   184 MM_SINGLEPLAYER_POS = 0x0C10 + 0x0020
                     0CD0   185 MM_MULTIPLAYER_POS  = 0x0CB0 + 0x0020
                     0D70   186 MM_OPTIONS_POS      = 0x0D50 + 0x0020
                            187 
                            188 ;;                          Y        X
                     0AE8   189 OM_CONTROLS_POS        = 0x0AD0 + 0x0018
                     0B84   190 OM_P1CONTROLS_POS      = 0x0B70 + 0x0014
                     0C24   191 OM_P2CONTROLS_POS      = 0x0C10 + 0x0014
                     0AFD   192 OM_ACCESSIBILITY_POS    = 0x0AD0 + 0x002E - 1
                     0B9C   193 OM_GODMODE_POS          = 0x0B70 + 0x002C
                     0C3C   194 OM_PALETTE_POS          = 0x0C10 + 0x002C
                     0D70   195 OM_RESTORE_POS          = 0x0D50 + 0x0020
                     0EB4   196 OM_BACK_POS             = 0x0E90 + 0x0024
                     0BA9   197 OM_OFF_POS              = 0x0B70 + 0x002C + 13
                     0BA9   198 OM_ON_POS               = 0x0B70 + 0x002C + 13
                            199 
                     0B89   200 OM_CHANGECONTROLS_POS   = 0x0B70 + 0x0026 - 13
                     0C34   201 OM_RIGHTKEY_POS         = 0x0C10 + 0x002D - 9
                     0C34   202 OM_LEFTKEY_POS          = 0x0C10 + 0x002D - 9
                     0C34   203 OM_JUMPKEY_POS          = 0x0C10 + 0x002D - 9
                            204 
                            205 ;;                   Y        X
                     0B94   206 PM_PAUSE_POS    = 0x0B70 + 0x0026 - 2
                     0C2B   207 PM_RETURN_POS   = 0x0C10 + 0x001C - 1
                     0C3D   208 PM_MAINMENU_POS = 0x0C10 + 0x002D
                            209 
                            210 
                     1298   211 EM_COMPLETED    = 0x1280 + 24
                     13E1   212 EM_SCORE        = 0x13C0 + 33
                     13EA   213 EM_DEATHS       = 0x13C0 + 42
                     147C   214 EM_P1           = 0x1460 + 28
                     151C   215 EM_P2           = 0x1500 + 28
                     1612   216 EM_TIME         = 0x15F0 + 34
                     174B   217 EM_CONTINUE     = 0x1730 + 27
                            218 
                     1480   219 EM_P1_SCORE_DCM = 0x1460 + 32
                     1482   220 EM_P1_SCORE_MC  = EM_P1_SCORE_DCM + 2
                     1484   221 EM_P1_SCORE_DU  = EM_P1_SCORE_MC + 2
                            222 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



                     148B   223 EM_P1_DEATHS_MC = 0x1460 + 43
                     148D   224 EM_P1_DEATHS_DU = EM_P1_DEATHS_MC + 2
                            225 
                     1520   226 EM_P2_SCORE_DCM = 0x1500 + 32
                     1522   227 EM_P2_SCORE_MC  = EM_P2_SCORE_DCM + 2
                     1524   228 EM_P2_SCORE_DU  = EM_P2_SCORE_MC + 2
                            229 
                     152B   230 EM_P2_DEATHS_MC    = 0x1500 + 43
                     152D   231 EM_P2_DEATHS_DU = EM_P2_DEATHS_MC + 2
                            232 
                     1664   233 EM_TOTAL_TIME   = 0x1640 + 36
                            234 
                            235 
                     0320   236 SUBMENU_BOX_1_POS       = 0x0320
                     0360   237 SUBMENU_BOX_2_POS       = 0x0320 + 0x0040
                     1B20   238 SUBMENU_BOX_LINE_TOP    = 0x1B20
                     2460   239 SUBMENU_BOX_LINE_BOTTOM = 0x2460
                            240 
                            241 
                     283B   242 HUD_SCORE_POS = 0x2800 + 59
                     2847   243 HUD_DEATH_POS = 0x2800 + 71
                            244 
                            245 
                            246 ;;STRING CONSTS
                     002F   247 END_STRING = 47
                     003D   248 START_CHARACTERS = 61
                     0030   249 START_NUMBERS = 48
                            250 
                            251 
                            252 
                            253 ;;SPRITE SIZE
                     0030   254 SPR_PLAYER_SIZE = 2 * 3 * 8
                     0004   255 SPR_CHECKPOINT_SIZE = 1 * 4
                     001A   256 SPR_COLLECTABLE_SIZE = 2 * 13
                     0016   257 SPR_DOOR_SIZE = 2 * 11
                     0018   258 SPR_DJUMP_SIZE = 4 * 6
                     0010   259 SPR_GPUP_SIZE = 2 * 8
                            260 
                            261 
                            262 
                            263 
                            264 
                            265 ;PLAYER ANIMATIONS
                            266 .globl anim_player_idle_R
                            267 .globl anim_player_idle_L
                            268 .globl anim_player_run_R
                            269 .globl anim_player_run_L
                            270 .globl anim_player_wall_R
                            271 .globl anim_player_wall_L
                            272 .globl anim_player_jump_R
                            273 .globl anim_player_jump_L
                            274 .globl anim_player_door
                            275 .globl anim_player_2_door
                            276 .globl anim_player_death
                            277 .globl anim_player_2_death
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 10.
Hexadecimal [16-Bits]



                            278 .globl anim_player_respawn
                            279 .globl anim_player_2_respawn
                            280 
                            281 
                            282 ;ENEMY ANIMATIONS
                            283 .globl anim_enemy_R
                            284 .globl anim_enemy_L
                            285 .globl anim_enemy_S
                            286 
                            287 
                            288 ;INTERACTABLE ANIMATIONS
                            289 .globl anim_interactable_door
                            290 .globl anim_interactable_gravity_up_power_up
                            291 .globl anim_interactable_gravity_down_power_up
                            292 .globl anim_interactable_djump_power_up
                            293 .globl anim_interactable_djump_active_power_up
                            294 .globl anim_interactable_colectable
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 11.
Hexadecimal [16-Bits]



                              2 
                              3 
                              4 ;;GLOBLS
                              5 
                              6 .globl cpct_disableFirmware_asm
                              7 .globl cpct_zx7b_decrunch_s_asm
                              8 .globl cpct_scanKeyboard_asm
                              9 .globl cpct_isAnyKeyPressed_f_asm
                             10 .globl cpct_isKeyPressed_asm
                             11 
                             12 
                             13 .globl cpct_drawSprite_asm
                             14 .globl cpct_drawSpriteVFlip_asm
                             15 .globl cpct_drawSpriteMasked_asm
                             16 .globl cpct_drawSpriteVFlipMasked_asm
                             17 .globl cpct_drawTileZigZagGrayCode4x8_af_asm
                             18 .globl cpct_drawSolidBox_asm
                             19 
                             20 
                             21 .globl cpct_setPalette_asm
                             22 .globl cpct_setVideoMode_asm
                             23 .globl cpct_setPALColour_asm
                             24 .globl cpct_getScreenPtr_asm
                             25 .globl cpct_waitVSYNC_asm
                             26 .globl cpct_setVideoMemoryPage_asm
                             27 
                             28 .globl cpct_etm_setDrawTilemap4x8_ag_asm
                             29 .globl cpct_etm_drawTilemap4x8_ag_asm
                             30 
                             31 .globl cpct_akp_musicInit_asm
                             32 .globl cpct_akp_musicPlay_asm
                             33 
                             34 .globl cpct_waitHalts_asm
                             35 
                             36 .globl _cpct_keyboardStatusBuffer
                             37 .globl _g_palette
                             38 .globl _ambient_sound
                             39 
                             40 
                             41 
                             42 ;;AMSTRAD CONSTS
                     0050    43 SCREEN_W = 80
                     00C8    44 SCREEN_H = 200
                             45 
                             46 ;;TILEMAP CONSTS
                             47 
                     0014    48 TILEMAP_W           = 20
                     0017    49 TILEMAP_H           = 23
                     0019    50 TILEMAP_MENU_H      = 25
                             51 
                     2A00    52 TILEMAP_START       = 0x2A00
                     01CC    53 TILEMAP_SIZE        = TILEMAP_W * TILEMAP_H
                     01F4    54 TILEMAP_MENU_SIZE   = TILEMAP_W * TILEMAP_MENU_H
                     2BF4    55 TILESET_START       = TILEMAP_START + TILEMAP_MENU_SIZE
                     0600    56 TILESET_SIZE        = 0X0600
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 12.
Hexadecimal [16-Bits]



                             57 
                     00A0    58 HUD_SIZE            = 80*2
                     C0A0    59 TILEMAP_VMEM_START  = 0xC000+HUD_SIZE
                             60 
                     0020    61 TILE_SIZE           = 4 * 8
                     0004    62 TILE_W              = 4
                     0008    63 TILE_H              = 8
                             64 
                             65 ;;GAME STATES
                     0001    66 GS_SINGLEPLAYER     = 1
                     0002    67 GS_MULTIPLAYER      = 2
                             68 
                             69 ;;ENTITY PHYSICS CONSTS
                     0000    70 _eph_x              = 0
                     0001    71 _eph_y              = 1
                     0002    72 _eph_w              = 2
                     0003    73 _eph_h              = 3
                     0004    74 _eph_vx             = 4
                     0005    75 _eph_vy             = 5
                     0006    76 _eph_offset         = 6
                     0007    77 _eph_attributes     = 7
                     0008    78 _eph_size           = 8
                             79 
                     0005    80 _ephf_orientation   = 5
                     0004    81 _ephf_ground        = 4
                     0003    82 _ephf_wall          = 3
                     0002    83 _ephf_h_ground      = 2
                             84 
                             85 ;;ENTITY DRAWABLE CONSTS
                     0008    86 _ed_spr_l          =  0 + _eph_size
                     0009    87 _ed_spr_h          =  1 + _eph_size
                     000A    88 _ed_spr_wi         =  2 + _eph_size
                     000B    89 _ed_spr_he         =  3 + _eph_size
                     000C    90 _ed_spr_size       =  4 + _eph_size
                     000D    91 _ed_pre_x          =  5 + _eph_size
                     000E    92 _ed_pre_y          =  6 + _eph_size
                     000F    93 _ed_pre_o          =  7 + _eph_size
                     0010    94 _ed_ox             =  8 + _eph_size
                     0011    95 _ed_oy             =  9 + _eph_size
                     0012    96 _ed_anim_ind_h     = 10 + _eph_size
                     0013    97 _ed_anim_ind_l     = 11 + _eph_size
                     0014    98 _ed_anim_pos       = 12 + _eph_size
                     0015    99 _ed_anim_dur       = 13 + _eph_size
                            100 
                            101 
                     0016   102 _ed_size        = 14 + _eph_size
                            103 
                     0007   104 _edf_mask       = 7
                     0006   105 _edf_flip       = 6
                            106 
                            107 ;;ENTITY INTERACTABLE CONSTS
                     0016   108 _ei_score       = 0 + _ed_size
                     0017   109 _ei_type        = 1 + _ed_size
                     0018   110 _ei_disabled    = 2 + _ed_size
                            111 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 13.
Hexadecimal [16-Bits]



                     0019   112 _ei_size        = 3 + _ed_size
                            113 
                     0000   114 _eit_w            = 0
                     0001   115 _eit_h            = 1
                     0002   116 _eit_attributes   = 2
                     0003   117 _eit_spr_l        = 3
                     0004   118 _eit_spr_h        = 4
                     0005   119 _eit_spr_wi       = 5
                     0006   120 _eit_spr_he       = 6
                     0007   121 _eit_spr_size     = 7
                     0008   122 _eit_spr_ox       = 8
                     0009   123 _eit_spr_oy       = 9
                     000A   124 _eit_anim_ind_h   = 10
                     000B   125 _eit_anim_ind_l   = 11
                     000C   126 _eit_score        = 12
                     000D   127 _eit_type         = 13
                            128 
                            129 ;;INTERACTABLE TYPES
                     0000   130 EI_NONE         = 0
                     0001   131 EI_CHECKPOINT   = 1
                     0002   132 EI_DOUBLE_JUMP  = 2
                     0003   133 EI_GRAVITY_UP   = 3
                     0004   134 EI_GRAVITY_DOWN = 4
                     0005   135 EI_COLLECTABLE  = 5
                     0006   136 EI_DOOR         = 6
                            137 
                            138 ;;ENTITY ENEMY CONSTS
                     0016   139 _ee_jump_state = 0 + _ed_size ;;Offset de la tabla de saltos
                     0017   140 _ee_type       = 1 + _ed_size
                     0018   141 _ee_disabled   = 2 + _ed_size
                     0019   142 _ee_origin_x   = 3 + _ed_size
                     001A   143 _ee_origin_y   = 4 + _ed_size
                     001B   144 _ee_size       = 5 + _ed_size
                            145 
                     0001   146 _eef_gravity        = 1
                            147 
                            148 ;; ENEMY TYPE CONSTS
                     0000   149 _eet_w            = 0
                     0001   150 _eet_h            = 1
                     0002   151 _eet_attributes   = 2
                     0003   152 _eet_spr_l        = 3
                     0004   153 _eet_spr_h        = 4
                     0005   154 _eet_spr_wi       = 5
                     0006   155 _eet_spr_he       = 6
                     0007   156 _eet_spr_size     = 7
                     0008   157 _eet_spr_ox       = 8
                     0009   158 _eet_spr_oy       = 9
                     000A   159 _eet_anim_ind_h   = 10
                     000B   160 _eet_anim_ind_l   = 11
                     000C   161 _eet_type         = 12
                            162 
                     0000   163 ET_NONE         = 0
                     0001   164 ET_TURTLE       = 1
                     0002   165 ET_SAW          = 2
                     0003   166 ET_ROCK         = 3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 14.
Hexadecimal [16-Bits]



                            167 
                     0084   168 EE_DISABLED         = 132
                     0014   169 EE_SAW_DISABLED     = 20
                     0064   170 EE_ROCK_DISABLED    = 100
                            171 
                            172 ;;ENTITY PLAYER CONSTS
                     0016   173 _ep_jump_state      = 0 + _ed_size ;;Offset de la tabla de saltos
                     0017   174 _ep_wall_dir        = 1 + _ed_size ;;Indica si esta chocando con una pared y su orientacion
                     0018   175 _ep_force_x         = 2 + _ed_size ;;Force X
                     0019   176 _ep_score_cdm       = 3 + _ed_size ;;Score [Centenas de Millar, Decenas de Millar]
                     001A   177 _ep_score_mc        = 4 + _ed_size ;;Score [Millares, Centenas]
                     001B   178 _ep_score_du        = 5 + _ed_size ;;Score [Decenas, Unidades]
                     001C   179 _ep_deaths_mc       = 6 + _ed_size ;;Deaths [Millares, Centenas]
                     001D   180 _ep_deaths_du       = 7 + _ed_size ;;Deaths [Decenas, Unidades]
                     001E   181 _ep_player_attr     = 8 + _ed_size ;;Player Attributes
                     001F   182 _ep_anim_counter    = 9 + _ed_size ;;Contador para ciertas animaciones del jugador
                            183 
                     0020   184 _ep_size            = 10 + _ed_size
                            185 
                            186 ;;PLAYERS
                            187 .globl player_1
                            188 .globl player_2
                            189 
                            190 ;; ENEMIES
                            191 .globl enemy_index
                            192 .globl enemy_vector
                            193 .globl me_num_enemy
                            194 
                            195 ;; INTERACTUABLES
                            196 .globl interactable_index
                            197 .globl interactable_vector
                            198 .globl mi_num_interactable
                            199 .globl mi_next_interactable_l
                            200 
                            201 .globl checkpoint_x
                            202 .globl checkpoint_y
                            203 
                            204 ;;JUMP TABLE
                     0000   205 JT_INIT             = 0
                     0000   206 JT_WALL_JUMP        = 0
                     000E   207 JT_ON_GROUND        = 14
                     000F   208 JT_ON_WALL          = 15
                     0016   209 JT_END              = 22
                     0002   210 JT_PTOGRESSIVE_MIN  = 2
                     0008   211 JT_PROGRESSIVE_MAX  = 8
                     000B   212 JT_GRAVITY_CONTINUE = 11
                     0000   213 JT_GRAVITY_MARGIN   = 0
                            214 
                     007F   215 FORCE_X_R           = #0b01111111
                     0080   216 FORCE_X_L           = #0b10000000
                     007D   217 FORCE_X_R_MIN       = FORCE_X_R - 2
                     0083   218 FORCE_X_L_MIN       = FORCE_X_L + 3
                            219 
                            220 ;;SPRITE SIZES
                     0030   221 PLAYER = 48  ;; 0x30 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 15.
Hexadecimal [16-Bits]



                            222 
                            223 
                            224 ;;COLLISION CONSTS
                     0005   225 GROUP_TRANSPARENT   = 5
                     0026   226 GROUP_SOLID         = 38
                     002E   227 GROUP_DANGEROUS     = 46
                     002F   228 GROUP_GDOWN         = 47
                     0030   229 GROUP_GUP           = 48
                     0050   230 GROUP_ENTITIES      = 80
                            231 
                            232 ;;ENEMY CONSTS
                     0058   233 GROUP_SAW           = 88
                     005A   234 GROUP_ROCK          = 90
                     005C   235 GROUP_TURTLE        = 92
                     005C   236 GROUP_ENEMIES       = 92
                            237 
                            238 ;;INTERACTABLE CONSTS
                     0066   239 GROUP_INTERACTABLE  = 102
                            240 
                            241 
                            242 
                     0000   243 TRANSPARENT  = 0     ; Prioridad +
                     0001   244 GRAVITY_DOWN = 1     ; Prioridad ++
                     0002   245 GRAVITY_UP   = 2     ; Prioridad +++
                     0003   246 DANGEROUS    = 3     ; Prioridad ++++
                     0004   247 SOLID        = 4     ; Prioridad +++++
                            248 
                            249 
                            250 ;;SCORES
                     0064   251 PRIMERO = 100
                     004B   252 SEGUNDO = 75
                     0032   253 TERCERO = 50
                     0019   254 CUARTO  = 25
                            255 
                            256 
                            257 ;; DEFAULT KEYS
                            258 
                     0407   259 P1_KEY_R = #0x0407      ;;Default - 'E'
                     0807   260 P1_KEY_L = #0x0807      ;;Default - 'W'
                     0808   261 P1_KEY_J = #0x0808      ;;Default - 'Q'
                            262 
                     0803   263 P2_KEY_R = #0x0803      ;;Default - 'I'
                     0404   264 P2_KEY_L = #0x0404      ;;Default - 'O'
                     0804   265 P2_KEY_J = #0x0804      ;;Default - 'P'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 16.
Hexadecimal [16-Bits]



                              3 
                              4 .globl _sr_update_hud_player_data
                              5 
                              6 .globl actual_level
                              7 .globl mg_front_buffer
                              8 
                              9 .globl _sr_draw_string
                             10 
                             11 .globl checkpoint_level
                             12 
                             13 .globl timer_state
                             14 .globl seconds_dc
                             15 .globl seconds
                             16 .globl minutes
                             17 
                             18 .globl p1_key_gameplay
                             19 .globl p2_key_gameplay
                             20 
                             21 .globl p1_key_r
                             22 .globl p1_key_l
                             23 .globl p1_key_j
                             24 .globl p2_key_r
                             25 .globl p2_key_l
                             26 .globl p2_key_j
                             27 
                             28 .globl Key_1
                             29 .globl Key_2
                             30 .globl Key_3
                             31 .globl Key_4
                             32 .globl Key_5
                             33 .globl Key_6
                             34 .globl Key_7
                             35 .globl Key_8
                             36 .globl Key_9
                             37 
                             38 .globl Key_Space    ;; Seleccionar la opción por defecto
                             39 .globl Key_Esc      ;; Volver al menú anterior
                             40 .globl Key_M        ;; Mutear/Desmutear música Y EFECTOS DE SONIDO
                             41 
                             42 
                             43 
                             44 
                             45 ;;FUNCIONES
                             46 .globl _su_get_key_input
                             47 .globl _su_add_score
                             48 .globl _su_get_menu_key_input
                             49 .globl _su_reset_data
                             50 .globl _su_get_key_pressed
                             51 .globl _su_set_player_keys
                             52 
                             53 ;;CONSTANTES
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 17.
Hexadecimal [16-Bits]



                              2 
                              3 .area _DATA
                              4 
                              5 .area _CODE
                              6 
                              7 
                              8 
                              9 ;;==================================================================
                             10 ;;                           ADD SCORE
                             11 ;;------------------------------------------------------------------
                             12 ;; Anade puntuacion al jugador y la guarda en decimal
                             13 ;;------------------------------------------------------------------
                             14 ;;
                             15 ;; INPUT:
                             16 ;;  IY -> Entity Player ptr
                             17 ;;   E -> Score [Decenas, Unidades] EN DECIMAL
                             18 ;;   D -> Score [Millares, Centenas] EN DECIMAL
                             19 ;;
                             20 ;; OUTPUT:
                             21 ;;  NONE
                             22 ;;
                             23 ;; DESTROYS:
                             24 ;;   AF
                             25 ;;
                             26 ;;------------------------------------------------------------------
                             27 ;; CYCLES: []
                             28 ;;==================================================================
   0000                      29 _su_add_score:
                             30 
   0000 FD 7E 1B      [19]   31     ld a, _ep_score_du(iy)
   0003 83            [ 4]   32     add e
   0004 C6 00         [ 7]   33     add #0x00
   0006 27            [ 4]   34     daa
   0007 FD 77 1B      [19]   35     ld _ep_score_du(iy), a
                             36 
   000A FD 7E 1A      [19]   37     ld a, _ep_score_mc(iy)
   000D 8A            [ 4]   38     adc d
   000E C6 00         [ 7]   39     add #0x00
   0010 27            [ 4]   40     daa
   0011 FD 77 1A      [19]   41     ld _ep_score_mc(iy), a
   0014 30 0A         [12]   42     jr nc, as_add_score_end
                             43 
   0016 FD 7E 19      [19]   44     ld a, _ep_score_cdm(iy)
   0019 3C            [ 4]   45     inc a
   001A C6 00         [ 7]   46     add #0x00
   001C 27            [ 4]   47     daa 
   001D FD 77 19      [19]   48     ld _ep_score_cdm(iy), a
                             49 
                             50 
   0020                      51 as_add_score_end:
                             52 
   0020 3E 01         [ 7]   53     ld a, #0x01
   0022 CD 00 00      [17]   54     call _sr_update_hud_player_data
                             55 
   0025 C9            [10]   56     ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 18.
Hexadecimal [16-Bits]



                             57 
                             58 
                             59 
                             60 ;;==================================================================
                             61 ;;                        GET KEY INPUT
                             62 ;;------------------------------------------------------------------
                             63 ;; Gestiona el input en función de las teclas que se han pulsado
                             64 ;;------------------------------------------------------------------
                             65 ;;
                             66 ;; INPUT:
                             67 ;;  NONE
                             68 ;;
                             69 ;; OUTPUT:
                             70 ;;  DE ->  D = P1(key_r + key_l),  E = P2(key_r + key_l)
                             71 ;;  p1_key_gameplay -> Estado actual y previo de la tecla de salto del jugador 1
                             72 ;;  p2_key_gameplay -> Estado actual y previo de la tecla de salto del jugador 2
                             73 ;;  A  -> Si se ha pulsado el botón de pausa o no
                             74 ;;
                             75 ;; DESTROYS:
                             76 ;;  AF, BC, DE, HL, BC', DE', HL'
                             77 ;;
                             78 ;;------------------------------------------------------------------
                             79 ;; CYCLES: []
                             80 ;;==================================================================
   0026                      81 _su_get_key_input:
                             82 
   0026 21 00 00      [10]   83     ld hl, #p1_key_gameplay     ;;Ponemos el actual_key en el previous_key
   0029 CB 26         [15]   84     sla (hl)                
                             85 
   002B 21 00 00      [10]   86     ld hl, #p2_key_gameplay
   002E CB 26         [15]   87     sla (hl)
                             88 
   0030 76            [ 4]   89     halt
   0031 CD 00 00      [17]   90     call cpct_scanKeyboard_asm
                             91 
   0034 11 00 00      [10]   92     ld de, #0x0000
                             93     
   0037 CD 00 00      [17]   94     call cpct_isAnyKeyPressed_f_asm
   003A FE 00         [ 7]   95     cp #0x00
   003C C8            [11]   96     ret z
                             97 
   003D D9            [ 4]   98     exx
                             99 
                            100 ;;Comprobar P1_key_r
   003E 2A 00 00      [16]  101     ld hl, (p1_key_r)
   0041 CD 00 00      [17]  102     call cpct_isKeyPressed_asm
   0044 28 03         [12]  103     jr z, gki_check_p1_l
                            104 
   0046 D9            [ 4]  105         exx
   0047 14            [ 4]  106         inc d
   0048 D9            [ 4]  107         exx
                            108         
                            109 
                            110 ;;Comprobar P1_key_l
   0049                     111 gki_check_p1_l:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 19.
Hexadecimal [16-Bits]



   0049 2A 00 00      [16]  112     ld hl, (p1_key_l)
   004C CD 00 00      [17]  113     call cpct_isKeyPressed_asm
   004F 28 03         [12]  114     jr z, gki_check_p1_j
                            115 
   0051 D9            [ 4]  116         exx
   0052 15            [ 4]  117         dec d
   0053 D9            [ 4]  118         exx
                            119 
                            120 
                            121 ;;Comprobar P1_key_j
   0054                     122 gki_check_p1_j:
   0054 2A 00 00      [16]  123     ld hl, (p1_key_j)
   0057 CD 00 00      [17]  124     call cpct_isKeyPressed_asm
   005A 28 05         [12]  125     jr z, gki_check_p2_r
                            126 
   005C 21 00 00      [10]  127         ld hl, #p1_key_gameplay
   005F CB C6         [15]  128         set 0, (hl)
                            129 
                            130 
                            131 ;;Comprobar P2_key_r
   0061                     132 gki_check_p2_r:
   0061 2A 00 00      [16]  133     ld hl, (p2_key_r)
   0064 CD 00 00      [17]  134     call cpct_isKeyPressed_asm
   0067 28 03         [12]  135     jr z, gki_check_p2_l
                            136 
   0069 D9            [ 4]  137         exx
   006A 1C            [ 4]  138         inc e
   006B D9            [ 4]  139         exx
                            140 
                            141 ;;Comprobar P2_key_l
   006C                     142 gki_check_p2_l:
   006C 2A 00 00      [16]  143     ld hl, (p2_key_l)
   006F CD 00 00      [17]  144     call cpct_isKeyPressed_asm
   0072 28 03         [12]  145     jr z, gki_check_p2_j
                            146 
   0074 D9            [ 4]  147         exx
   0075 1D            [ 4]  148         dec e
   0076 D9            [ 4]  149         exx
                            150 
                            151 ;;Comprobar P2_key_j
   0077                     152 gki_check_p2_j:
   0077 2A 00 00      [16]  153     ld hl, (p2_key_j)
   007A CD 00 00      [17]  154     call cpct_isKeyPressed_asm
   007D 28 07         [12]  155     jr z, gki_check_pause
                            156 
   007F 21 00 00      [10]  157         ld hl, #p2_key_gameplay
   0082 CB C6         [15]  158         set 0, (hl)
   0084 18 0C         [12]  159         jr gki_exit
                            160 
                            161 
   0086                     162 gki_check_pause:
   0086 21 00 00      [10]  163     ld hl, #Key_Esc
   0089 CD 00 00      [17]  164     call cpct_isKeyPressed_asm
   008C 28 04         [12]  165     jr z, gki_exit
   008E 3E 01         [ 7]  166         ld a, #0x01
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 20.
Hexadecimal [16-Bits]



   0090 18 01         [12]  167         jr gki_pause_exit
                            168 
   0092                     169 gki_exit:
   0092 AF            [ 4]  170     xor a
   0093                     171 gki_pause_exit:
   0093 D9            [ 4]  172     exx
   0094 C9            [10]  173     ret
                            174 
                            175 
                            176 
                            177 
                            178 ;;==================================================================
                            179 ;;                        GET MENU KEY INPUT
                            180 ;;------------------------------------------------------------------
                            181 ;; Gestiona el input en función de las teclas que se han pulsado para los menús
                            182 ;;------------------------------------------------------------------
                            183 ;;
                            184 ;; INPUT:
                            185 ;;  NONE
                            186 ;;
                            187 ;; OUTPUT:
                            188 ;;  A -> Número que se ha pulsado (0x00 si no se ha pulsado nada)
                            189 ;;
                            190 ;; DESTROYS:
                            191 ;;  AF, BC, DE, HL
                            192 ;;
                            193 ;;------------------------------------------------------------------
                            194 ;; CYCLES: []
                            195 ;;==================================================================
   0095                     196 _su_get_menu_key_input:
                            197 
                            198     ;; Escanear teclado
   0095 76            [ 4]  199     halt
   0096 CD 00 00      [17]  200     call cpct_scanKeyboard_asm
                            201 
   0099 AF            [ 4]  202     xor a
   009A CD 00 00      [17]  203     call cpct_isAnyKeyPressed_f_asm
   009D FE 00         [ 7]  204     cp #0x00
   009F C8            [11]  205     ret z
                            206 
                            207     ;;Comprobar teclas pulsadas (las que nos interesan)
   00A0                     208     gmki_check_1:
   00A0 21 00 00      [10]  209     ld hl, #Key_1
   00A3 CD 00 00      [17]  210     call cpct_isKeyPressed_asm
   00A6 28 03         [12]  211     jr z, gmki_check_2
   00A8 3E 01         [ 7]  212         ld a, #0x01
   00AA C9            [10]  213         ret
                            214     
   00AB                     215     gmki_check_2:
   00AB 21 00 00      [10]  216     ld hl, #Key_2
   00AE CD 00 00      [17]  217     call cpct_isKeyPressed_asm
   00B1 28 03         [12]  218     jr z, gmki_check_3
   00B3 3E 02         [ 7]  219         ld a, #0x02
   00B5 C9            [10]  220         ret
                            221         
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 21.
Hexadecimal [16-Bits]



   00B6                     222     gmki_check_3:
   00B6 21 00 00      [10]  223     ld hl, #Key_3
   00B9 CD 00 00      [17]  224     call cpct_isKeyPressed_asm
   00BC 28 03         [12]  225     jr z, gmki_check_4
   00BE 3E 03         [ 7]  226         ld a, #0x03
   00C0 C9            [10]  227         ret
                            228     
   00C1                     229     gmki_check_4:
   00C1 21 00 00      [10]  230     ld hl, #Key_4
   00C4 CD 00 00      [17]  231     call cpct_isKeyPressed_asm
   00C7 28 03         [12]  232     jr z, gmki_check_5
   00C9 3E 04         [ 7]  233         ld a, #0x04
   00CB C9            [10]  234         ret
                            235     
   00CC                     236     gmki_check_5:
   00CC 21 00 00      [10]  237     ld hl, #Key_5
   00CF CD 00 00      [17]  238     call cpct_isKeyPressed_asm
   00D2 28 03         [12]  239     jr z, gmki_check_6
   00D4 3E 05         [ 7]  240         ld a, #0x05
   00D6 C9            [10]  241         ret
                            242     
   00D7                     243     gmki_check_6:
   00D7 21 00 00      [10]  244     ld hl, #Key_6
   00DA CD 00 00      [17]  245     call cpct_isKeyPressed_asm
   00DD 28 03         [12]  246     jr z, gmki_check_7
   00DF 3E 06         [ 7]  247         ld a, #0x06
   00E1 C9            [10]  248         ret
                            249     
   00E2                     250     gmki_check_7:
   00E2 21 00 00      [10]  251     ld hl, #Key_7
   00E5 CD 00 00      [17]  252     call cpct_isKeyPressed_asm
   00E8 28 03         [12]  253     jr z, gmki_check_8
   00EA 3E 07         [ 7]  254         ld a, #0x07
   00EC C9            [10]  255         ret
                            256     
   00ED                     257     gmki_check_8:
   00ED 21 00 00      [10]  258     ld hl, #Key_8
   00F0 CD 00 00      [17]  259     call cpct_isKeyPressed_asm
   00F3 28 03         [12]  260     jr z, gmki_check_9
   00F5 3E 09         [ 7]  261         ld a, #0x09
   00F7 C9            [10]  262         ret
                            263 
   00F8                     264     gmki_check_9:
   00F8 21 00 00      [10]  265     ld hl, #Key_9
   00FB CD 00 00      [17]  266     call cpct_isKeyPressed_asm
   00FE 28 03         [12]  267     jr z, gmki_check_default 
   0100 3E 09         [ 7]  268         ld a, #0x09
   0102 C9            [10]  269         ret
                            270 
   0103                     271     gmki_check_default:
   0103 21 00 00      [10]  272     ld hl, #Key_Space
   0106 CD 00 00      [17]  273     call cpct_isKeyPressed_asm
   0109 28 03         [12]  274     jr z, gmki_check_back
   010B 3E 0A         [ 7]  275         ld a, #0x0A
   010D C9            [10]  276         ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 22.
Hexadecimal [16-Bits]



                            277 
   010E                     278     gmki_check_back:
   010E 21 00 00      [10]  279     ld hl, #Key_Esc
   0111 CD 00 00      [17]  280     call cpct_isKeyPressed_asm
   0114 28 03         [12]  281     jr z, gmki_no_input
   0116 3E 0B         [ 7]  282         ld a, #0x0B
   0118 C9            [10]  283         ret
                            284     
   0119                     285     gmki_no_input:
   0119 AF            [ 4]  286     xor a
                            287 
   011A C9            [10]  288     ret
                            289 
                            290 
                            291 ;;==================================================================
                            292 ;;                           RESET GAME DATA
                            293 ;;------------------------------------------------------------------
                            294 ;; Reinicia los datos que no se reinician entre niveles
                            295 ;;------------------------------------------------------------------
                            296 ;;
                            297 ;; INPUT:
                            298 ;;  NONE
                            299 ;;
                            300 ;; OUTPUT:
                            301 ;;  NONE
                            302 ;;
                            303 ;; DESTROYS:
                            304 ;;   AF, BC, DE, HL
                            305 ;;
                            306 ;;------------------------------------------------------------------
                            307 ;; CYCLES: []
                            308 ;;==================================================================
   011B                     309 _su_reset_data:
                            310 
   011B FD 21 00 00   [14]  311     ld iy, #player_1
   011F 06 02         [ 7]  312     ld b, #0x02
   0121 AF            [ 4]  313     xor a
   0122                     314     rd_players_loop:
   0122 FD 77 19      [19]  315     ld _ep_score_cdm(iy), a
   0125 FD 77 1B      [19]  316     ld _ep_score_du(iy), a
   0128 FD 77 1A      [19]  317     ld _ep_score_mc(iy), a
   012B FD 77 1C      [19]  318     ld _ep_deaths_mc(iy), a
   012E FD 77 1D      [19]  319     ld _ep_deaths_du(iy), a
   0131 FD 21 00 00   [14]  320     ld iy, #player_2
   0135 05            [ 4]  321     dec b
   0136 20 EA         [12]  322     jr nz, rd_players_loop
                            323     
   0138 32 00 00      [13]  324     ld (actual_level), a
                            325     
   013B 32 00 00      [13]  326     ld (timer_state), a
   013E 32 00 00      [13]  327     ld (seconds_dc), a
   0141 32 00 00      [13]  328     ld (seconds), a
   0144 32 00 00      [13]  329     ld (minutes), a
                            330 
                            331     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 23.
Hexadecimal [16-Bits]



   0147 21 00 00      [10]  332     ld hl, #level_index
   014A 06 02         [ 7]  333     ld b, #NUM_LEVELS
   014C                     334     rd_levels_loop:
   014C 23            [ 6]  335         inc hl
   014D 23            [ 6]  336         inc hl
   014E 77            [ 7]  337         ld (hl), a
   014F 23            [ 6]  338         inc hl
   0150 23            [ 6]  339         inc hl
                            340 
   0151 05            [ 4]  341     dec b
   0152 20 F8         [12]  342     jr nz, rd_levels_loop
                            343 
   0154 32 00 00      [13]  344     ld (checkpoint_level), a
                            345 
   0157 3E 10         [ 7]  346     ld a, #0x10
   0159 32 00 00      [13]  347     ld (checkpoint_x), a
   015C 3E A7         [ 7]  348     ld a, #0xA7
   015E 32 00 00      [13]  349     ld (checkpoint_y), a
                            350     
                            351 
   0161 C9            [10]  352     ret
                            353 
                            354 
                            355 
                            356 
                            357 
                            358 ;;==================================================================
                            359 ;;                        GET KEY PRESSED
                            360 ;;------------------------------------------------------------------
                            361 ;; Devuelve el valor de la primera tecla pulsada
                            362 ;;------------------------------------------------------------------
                            363 ;;
                            364 ;; INPUT:
                            365 ;;  NONE
                            366 ;;
                            367 ;; OUTPUT:
                            368 ;;  DE -> Valor de la tecla pulsada (la primera que encuentra al recorrer el buffer)
                            369 ;;  F(Carry) -> Si el carry flag está seteado es que ha pulsado alguna tecla
                            370 ;;
                            371 ;; DESTROYS:
                            372 ;;   AF, BC, DE, HL
                            373 ;;
                            374 ;;------------------------------------------------------------------
                            375 ;; CYCLES: []
                            376 ;;==================================================================
   0162                     377 _su_get_key_pressed:
                            378 
                            379     ;; Escanear teclado
   0162 76            [ 4]  380     halt
   0163 CD 00 00      [17]  381     call cpct_scanKeyboard_asm
                            382 
   0166 AF            [ 4]  383     xor a
   0167 CD 00 00      [17]  384     call cpct_isAnyKeyPressed_f_asm
   016A FE 00         [ 7]  385     cp #0x00
   016C 3F            [ 4]  386     ccf
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 24.
Hexadecimal [16-Bits]



   016D C8            [11]  387     ret z
                            388 
                            389 
   016E 21 00 00      [10]  390     ld hl, #_cpct_keyboardStatusBuffer
                            391     ;; Iterar sobre el keyboard status buffer para sacar la tecla pulsada
   0171                     392     cka_keyboard_loop:
   0171 1E 00         [ 7]  393     ld e, #0x00
   0173                     394     lines_loop:
   0173 7E            [ 7]  395         ld a, (hl)
   0174 16 01         [ 7]  396         ld d, #0x01
                            397         
                            398 
   0176                     399         bits_loop:
   0176 CB 3F         [ 8]  400             srl a
   0178 D0            [11]  401             ret nc
   0179 CB 22         [ 8]  402             sla d
   017B 30 F9         [12]  403         jr nc, bits_loop
                            404 
   017D 23            [ 6]  405     inc hl
   017E 1C            [ 4]  406     inc e
   017F FE 0A         [ 7]  407     cp #0x0A
   0181 20 F0         [12]  408     jr nz, lines_loop
                            409 
                            410     ;; Resetear la carry flag
   0183 AF            [ 4]  411     xor a
                            412     
   0184 C9            [10]  413     ret
                            414 
                            415 
                            416 ;;==================================================================
                            417 ;;                        SET PLAYER KEYS
                            418 ;;------------------------------------------------------------------
                            419 ;; Setea las teclas del jugador a las que se van pulsando
                            420 ;;------------------------------------------------------------------
                            421 ;;
                            422 ;; INPUT:
                            423 ;;  HL -> Puntero a la primera tecla del jugador
                            424 ;;
                            425 ;; OUTPUT:
                            426 ;;
                            427 ;; DESTROYS:
                            428 ;;   HL
                            429 ;;
                            430 ;;------------------------------------------------------------------
                            431 ;; CYCLES: []
                            432 ;;==================================================================
   0185                     433 _su_set_player_keys:
                            434 
   0185 3E 03         [ 7]  435     ld a, #0x03
   0187                     436     spk_keys_loop:
   0187 F5            [11]  437         push af
   0188 E5            [11]  438         push hl
                            439 
                            440         
   0189 11 00 00      [10]  441         ld de, #om_rightkey
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 25.
Hexadecimal [16-Bits]



   018C FE 03         [ 7]  442         cp #0x03
   018E 28 0C         [12]  443         jr z, spk_draw_action
                            444         
   0190                     445         spk_check_left_action:
   0190 FE 02         [ 7]  446         cp #0x02
   0192 20 05         [12]  447         jr nz, spk_check_jump_action
   0194 11 00 00      [10]  448             ld de, #om_leftkey
   0197 18 03         [12]  449             jr spk_draw_action
                            450 
   0199                     451         spk_check_jump_action:
   0199 11 00 00      [10]  452         ld de, #om_jumpkey
                            453 
   019C                     454         spk_draw_action:
   019C 3A 00 00      [13]  455         ld a, (mg_front_buffer)
   019F 21 34 0C      [10]  456         ld hl, #OM_RIGHTKEY_POS
   01A2 CD 00 00      [17]  457         call _sr_draw_string
                            458 
   01A5                     459         spk_key_loop:
   01A5 CD 62 01      [17]  460             call _su_get_key_pressed
   01A8 38 FB         [12]  461         jr c, spk_key_loop
                            462 
                            463         ;; Para que no se vuelva a pulsar otra tecla por error
   01AA 06 50         [ 7]  464         ld b, #0x50
   01AC CD 00 00      [17]  465         call cpct_waitHalts_asm
                            466 
                            467         ;; Comprobar si no es una tecla no permitida
   01AF AF            [ 4]  468         xor a
   01B0 21 00 00      [10]  469         ld hl, #Key_Esc
   01B3 ED 52         [15]  470         sbc hl, de
   01B5 28 EE         [12]  471         jr z, spk_key_loop
                            472 
   01B7 AF            [ 4]  473         xor a
   01B8 21 00 00      [10]  474         ld hl, #Key_M
   01BB ED 52         [15]  475         sbc hl, de
   01BD 28 E6         [12]  476         jr z, spk_key_loop
                            477 
   01BF E1            [10]  478         pop hl
   01C0 73            [ 7]  479         ld (hl), e
   01C1 23            [ 6]  480         inc hl
   01C2 72            [ 7]  481         ld (hl), d
   01C3 23            [ 6]  482         inc hl
                            483 
   01C4 F1            [10]  484         pop af
   01C5 3D            [ 4]  485         dec a
   01C6 20 BF         [12]  486     jr nz, spk_keys_loop
                            487 
   01C8 C9            [10]  488 ret
